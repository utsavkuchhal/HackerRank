import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    static int equal(int[] arr) {
    int min = Arrays.stream(arr).min().getAsInt();
    int ans = Integer.MAX_VALUE;

    for(int i = 0; i < 5; i++)
    {
        int ops = 0;
        for(int j = 0; j < arr.length; j++){
            int t = arr[j] - (min - i);
            ops = ops + t/5 + t%5/2 + t%5%2;
        }
        ans  = Math.min(ans,ops);
    }
    return ans;
    }


    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int tItr = 0; tItr < t; tItr++) {
            int n = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            int[] arr = new int[n];

            String[] arrItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int i = 0; i < n; i++) {
                int arrItem = Integer.parseInt(arrItems[i]);
                arr[i] = arrItem;
            }

            int result = equal(arr);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}






I think we don't need to use dynamic programming here. First of all, 
if you give chocolate bars to all but chosen one, it is equivalent 
to take away the chocolate bar(s) from each chosen one until every 
one is equal. So the challenge becomes decrease from each individua
l 1, 2 or 5 until all are equal. Second to calculate the ops we nee
d to use to decrease an integer n until it reaches 0 (call it the f
unction f) is equivalent to convert 1, 5 (no need to use dynamic
programming here). Finally, to solve this challenge, we find the min (call it m
) of the given list, then for i from 0 to 4, we find min of ops[i]=sum(f(c-min+i))
where c is each individual colleague and thus no need to use dynamic programming here :)
